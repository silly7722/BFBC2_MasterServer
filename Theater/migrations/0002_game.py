# Generated by Django 4.1.4 on 2022-12-11 18:50

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ('Plasma', '0008_record'),
        ('Theater', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(help_text='Name of the server', verbose_name='Server Name')),
                ('addrIp',
                 models.GenericIPAddressField(help_text='IP Address of the server', verbose_name='IP Address')),
                ('addrPort', models.IntegerField(help_text='Port of the server', verbose_name='Port')),
                ('joiningPlayers',
                 models.IntegerField(default=0, help_text='Number of players joining the server right now',
                                     verbose_name='Joining Players')),
                ('queuedPlayers', models.IntegerField(default=0, help_text='Number of players in the queue',
                                                      verbose_name='Queued Players')),
                ('activePlayers', models.IntegerField(default=0, help_text='Number of players currently in the server',
                                                      verbose_name='Active Players')),
                ('maxPlayers',
                 models.IntegerField(help_text='Maximum number of players in the server', verbose_name='Max Players')),
                ('platform', models.CharField(choices=[('xenon', 'Xbox360'), ('ps3', 'Ps3'), ('PC', 'Pc')],
                                              help_text='Platform of the server', max_length=5,
                                              verbose_name='Platform')),
                ('joinMode', models.CharField(choices=[('C', 'Closed'), ('W', 'Wait'), ('O', 'Open')],
                                              help_text='Theater join mode', max_length=1, verbose_name='Join Mode')),
                ('gameType',
                 models.CharField(choices=[('G', 'Game'), ('P', 'Playgroup')], help_text='Theater game type',
                                  max_length=1, verbose_name='Game Type')),
                ('isPasswordRequired',
                 models.BooleanField(default=False, help_text='Is a password required to join the server?',
                                     verbose_name='Password Required')),
                ('serverSoftcore', models.BooleanField(default=False, help_text='Is the server softcore?',
                                                       verbose_name='Server Softcore')),
                ('serverHardcore', models.BooleanField(default=False, help_text='Is the server hardcore?',
                                                       verbose_name='Server Hardcore')),
                ('serverHasPassword', models.BooleanField(default=False, help_text='Does the server have a password?',
                                                          verbose_name='Server Has Password')),
                ('serverPunkbuster', models.BooleanField(default=False, help_text='Is the server Punkbuster protected?',
                                                         verbose_name='Server Punkbuster')),
                ('serverEA', models.BooleanField(default=False, help_text='Is the server official EA server?',
                                                 verbose_name='Server EA')),
                ('serverVersion',
                 models.CharField(help_text='Version of the server', max_length=16, verbose_name='Server Version')),
                ('clientVersion', models.CharField(help_text='Client version of the server', max_length=16,
                                                   verbose_name='Client Version')),
                ('gameLevel',
                 models.TextField(help_text='Current level of the server', null=True, verbose_name='Game Level')),
                (
                'gameMod', models.TextField(help_text='Current mod of the server', null=True, verbose_name='Game Mod')),
                ('gameMode',
                 models.TextField(help_text='Current game mode of the server', null=True, verbose_name='Game Mode')),
                ('gameSGUID',
                 models.TextField(help_text='Current SGUID of the server', null=True, verbose_name='Game SGUID')),
                ('gameTime', models.TextField(help_text='Uptime of the server', null=True, verbose_name='Uptime')),
                ('gameHash',
                 models.TextField(help_text='Current game hash of the server', null=True, verbose_name='Game Hash')),
                ('gameRegion', models.CharField(help_text='Current game region of the server', max_length=2, null=True,
                                                verbose_name='Game Region')),
                ('gamePublic',
                 models.BooleanField(default=False, help_text='Is the game public?', verbose_name='Game Public')),
                ('gameElo',
                 models.IntegerField(default=1000, help_text='Current Elo of the server', verbose_name='Game Elo')),
                ('gameAutoBalance', models.BooleanField(default=False, help_text='Is the game auto balanced?',
                                                        verbose_name='Game Auto Balance')),
                ('gameBannerUrl', models.TextField(blank=True, help_text='URL of the game banner', null=True,
                                                   verbose_name='Game Banner URL')),
                ('gameCrosshair', models.BooleanField(default=False, help_text='Is the crosshair enabled?',
                                                      verbose_name='Game Crosshair')),
                ('gameFriendlyFire', models.FloatField(default=0, help_text='Is the friendly fire enabled?',
                                                       verbose_name='Game Friendly Fire')),
                ('gameKillCam', models.BooleanField(default=False, help_text='Is the kill cam enabled?',
                                                    verbose_name='Game Kill Cam')),
                ('gameMinimap',
                 models.BooleanField(default=False, help_text='Is the minimap enabled?', verbose_name='Game Minimap')),
                ('gameMinimapSpotting', models.BooleanField(default=False, help_text='Is the minimap spotting enabled?',
                                                            verbose_name='Game Minimap Spotting')),
                ('gameThirdPersonVehicleCameras',
                 models.BooleanField(default=False, help_text='Is the third person vehicle cameras enabled?',
                                     verbose_name='Game Third Person Vehicle Cameras')),
                ('gameThreeDSpotting', models.BooleanField(default=False, help_text='Is the 3D spotting enabled?',
                                                           verbose_name='Game 3D Spotting')),
                ('numObservers',
                 models.IntegerField(help_text='Number of observers in the server', verbose_name='Game Observers')),
                ('maxObservers', models.IntegerField(help_text='Maximum number of observers in the server',
                                                     verbose_name='Max Observers')),
                ('providerId',
                 models.TextField(default='', help_text='Provider ID of the server', verbose_name='Provider ID')),
                ('queueLength', models.IntegerField(help_text='Length of the queue', verbose_name='Queue Length')),
                ('punkBusterVersion',
                 models.TextField(blank=True, help_text='Punkbuster version of the server', null=True,
                                  verbose_name='Punkbuster Version')),
                ('ugid',
                 models.CharField(blank=True, help_text='UGID of the server', max_length=16, verbose_name='UGID')),
                ('ekey', models.CharField(help_text='EKEY of the server', max_length=32, verbose_name='EKEY')),
                ('secret', models.CharField(help_text='Secret of the server', max_length=100, verbose_name='Secret')),
                ('lobby', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Theater.lobby')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Plasma.persona')),
            ],
            options={
                'verbose_name': 'Game',
                'verbose_name_plural': 'Games',
                'ordering': ('id',),
            },
        ),
    ]
